import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, ContextTypes
)
from telegram.constants import ParseMode
import os

from config import BOT_TOKEN, CAR_CATEGORIES, BOOKING_STATUS, LANGUAGES, MENU_ITEMS, ADMIN_CHAT_ID, REVIEW_CHAT_ID
from database import Database
from keyboards import *
from utils import format_price, validate_date_format, parse_date_range, calculate_total_price

# Create images directory if it doesn't exist
os.makedirs('public/images', exist_ok=True)

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
CHOOSING_LANGUAGE, CHOOSING_CATEGORY, CHOOSING_CAR, SELECTING_DATES, VIEWING_PRIVACY, ENTERING_PERSONAL_INFO, CONFIRMING_BOOKING, SELECTING_RATING, ENTERING_REVIEW = range(9)

class CarRentalBot:
    def __init__(self):
        self.db = Database()
        self.user_states = {}  # Store user booking states
        self.user_languages = {}  # Store user language preferences
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start command handler"""
        try:
            print(f"üîç Chat ID from start command: {update.effective_chat.id}")
            logger.info(f"Chat ID from start command: {update.effective_chat.id}")
            
            message = """
üåê *Welcome to CarRental Bot!*

Please select your preferred language:
Por favor, seleccione su idioma:
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:
"""
            if update.message:
                await update.message.reply_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_language_keyboard()
                )
            elif update.callback_query:
                await update.callback_query.message.edit_text(
                    message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_language_keyboard()
                )
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            raise
    
    async def handle_language_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle language selection"""
        try:
            query = update.callback_query
            print(f"üîç Chat ID from language selection: {update.effective_chat.id}")
            logger.info(f"Chat ID from language selection: {update.effective_chat.id}")
            
            await query.answer()
            
            language = query.data.split('_')[1]
            user = query.from_user
            
            # Store user's language preference
            self.user_languages[user.id] = language
            
            welcome_messages = {
                'en': f"Welcome {user.first_name}! I'm here to help you rent the perfect car.",
                'es': f"¬°Bienvenido {user.first_name}! Estoy aqu√≠ para ayudarte a alquilar el auto perfecto.",
                'ru': f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å."
            }
            
            await query.message.edit_text(
                welcome_messages[language],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_main_menu_keyboard(language)
            )
        except Exception as e:
            logger.error(f"Error in language selection: {e}")
            raise
    
    async def change_language(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle language change request"""
        query = update.callback_query
        await query.answer()
        
        welcome_message = """
üåê *Select Your Language*
Seleccione su idioma
–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫
        """
        
        await query.edit_message_text(
            welcome_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_language_keyboard()
        )
        
        return CHOOSING_LANGUAGE
    
    async def main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle main menu callbacks"""
        try:
            query = update.callback_query
            print(f"üîç Chat ID from main menu: {update.effective_chat.id}")
            logger.info(f"Chat ID from main menu: {update.effective_chat.id}")
            
            await query.answer()
            
            if query.data == "make_reservation":
                await self.start_booking_process(update, context)
            elif query.data == "car_fleet":
                await self.show_car_fleet(update, context)
            elif query.data == "conditions":
                await self.show_conditions(update, context)
            elif query.data == "payment_methods":
                await self.show_payment_methods(update, context)
            elif query.data == "contact_us":
                await self.show_contact_info(update, context)
            elif query.data == "change_language":
                await self.change_language(update, context)
            elif query.data == "main_menu":
                await self.show_main_menu(update, context)
        except Exception as e:
            logger.error(f"Error in main menu: {e}")
            raise
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show main menu"""
        try:
            query = update.callback_query
            if query:
                try:
                    await query.answer()
                except Exception as e:
                    logger.error(f"Error answering callback query: {e}")
                    # Continue even if answering the query fails
            
            language = self.get_user_language(update.effective_user.id)
            
            messages = {
                'en': "*Main Menu*\n\nWhat would you like to do?",
                'es': "*Men√∫ Principal*\n\n¬øQu√© te gustar√≠a hacer?",
                'ru': "*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?"
            }

            if query:
                try:
                    await query.message.edit_text(
                        messages[language],
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=get_main_menu_keyboard(language)
                    )
                except Exception as edit_error:
                    logger.error(f"Error editing message: {edit_error}")
                    # If editing fails, try sending a new message
                    await query.message.reply_text(
                        messages[language],
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=get_main_menu_keyboard(language)
                    )
            else:
                # If no query (e.g., command), send new message
                await update.message.reply_text(
                    messages[language],
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_main_menu_keyboard(language)
                )
        except Exception as e:
            logger.error(f"Error showing main menu: {e}")
            try:
                # Try to send a new message if all else fails
                if update.effective_chat:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="Please use /start to show the menu.",
                        reply_markup=get_main_menu_keyboard('en')
                    )
            except Exception as e2:
                logger.error(f"Error sending fallback message: {e2}")
    
    async def show_car_fleet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show car fleet"""
        try:
            query = update.callback_query
            await query.answer()
            
            language = self.get_user_language(query.from_user.id)

            # Price labels in different languages
            price_labels = {
                'en': {
                    'prices': 'Prices',
                    'currency': 'CLP',
                    'per_day': 'per day',
                    'week': '6 days (15% off)',
                    'month': '30 days (25% off)',
                    'threemonth': '3+ months (35% off)'
                },
                'es': {
                    'prices': 'Precios',
                    'currency': 'CLP',
                    'per_day': 'por d√≠a',
                    'week': '6 d√≠as (15% desc.)',
                    'month': '30 d√≠as (25% desc.)',
                    'threemonth': '+3 meses (35% desc.)'
                },
                'ru': {
                    'prices': '–¶–µ–Ω—ã',
                    'currency': 'CLP',
                    'per_day': '–≤ –¥–µ–Ω—å',
                    'week': '6 –¥–Ω–µ–π (—Å–∫–∏–¥–∫–∞ 15%)',
                    'month': '30 –¥–Ω–µ–π (—Å–∫–∏–¥–∫–∞ 25%)',
                    'threemonth': '3+ –º–µ—Å—è—Ü–∞ (—Å–∫–∏–¥–∫–∞ 35%)'
                }
            }

            # Car categories with their images and pricing
            cars = {
                'premium': [
                    {
                        'name': 'GAC All New GS8 (White)',
                        'name_es': 'GAC All New GS8 (Blanco)',
                        'name_ru': 'GAC All New GS8 (–ë–µ–ª—ã–π)',
                        'price': '149.990',
                        'week_price': '764.946',
                        'month_price': '3.374.775',
                        'threemonth_price': '2.924.805',
                        'description': {
                            'en': 'Large SUV, 7 seats',
                            'es': 'SUV grande, 7 asientos',
                            'ru': '–ë–æ–ª—å—à–æ–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫, 7 –º–µ—Å—Ç'
                        },
                        'image': 'public/images/gacfull.png'
                    },
                    {
                        'name': 'GAC All New GS8 (Black)',
                        'name_es': 'GAC All New GS8 (Negro)',
                        'name_ru': 'GAC All New GS8 (–ß–µ—Ä–Ω—ã–π)',
                        'price': '149.990',
                        'week_price': '764.946',
                        'month_price': '3.374.775',
                        'threemonth_price': '2.924.805',
                        'description': {
                            'en': 'Large SUV, 7 seats',
                            'es': 'SUV grande, 7 asientos',
                            'ru': '–ë–æ–ª—å—à–æ–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫, 7 –º–µ—Å—Ç'
                        },
                        'image': 'public/images/gaccomfort.PNG'
                    },
                    {
                        'name': 'Lexus RX 450 H',
                        'name_es': 'Lexus RX 450 H',
                        'name_ru': 'Lexus RX 450 H',
                        'price': '135.990',
                        'week_price': '692.343',
                        'month_price': '3.059.775',
                        'threemonth_price': '2.653.335',
                        'description': {
                            'en': 'Premium hybrid SUV',
                            'es': 'SUV premium h√≠brido',
                            'ru': '–ü—Ä–µ–º–∏—É–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫'
                        },
                        'image': 'public/images/lexusrx.png'
                    }
                ],
                'economy': [
                    {
                        'name': 'Chevrolet Cavalier',
                        'name_es': 'Chevrolet Cavalier',
                        'name_ru': 'Chevrolet Cavalier',
                        'price': '49.990',
                        'week_price': '254.943',
                        'month_price': '1.124.775',
                        'threemonth_price': '974.805',
                        'description': {
                            'en': 'Compact sedan',
                            'es': 'Sed√°n compacto',
                            'ru': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–µ–¥–∞–Ω'
                        },
                        'image': 'public/images/chevrolett.png'
                    },
                    {
                        'name': 'Cherry Tiggo 2 Pro Max',
                        'name_es': 'Cherry Tiggo 2 Pro Max',
                        'name_ru': 'Cherry Tiggo 2 Pro Max',
                        'price': '49.990',
                        'week_price': '254.943',
                        'month_price': '1.124.775',
                        'threemonth_price': '974.805',
                        'description': {
                            'en': 'Compact SUV',
                            'es': 'SUV compacto',
                            'ru': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫'
                        },
                        'image': 'public/images/cherry.PNG'
                    },
                    {
                        'name': 'Honda Accord',
                        'name_es': 'Honda Accord',
                        'name_ru': 'Honda Accord',
                        'price': '34.990',
                        'week_price': '178.443',
                        'month_price': '787.275',
                        'threemonth_price': '682.635',
                        'description': {
                            'en': 'Mid-size/full-size sedan',
                            'es': 'Sed√°n mediano/full-size',
                            'ru': '–°—Ä–µ–¥–Ω–∏–π/–ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—ã–π —Å–µ–¥–∞–Ω'
                        },
                        'image': 'public/images/honda.png'
                    },
                    {
                        'name': 'Mazda 6',
                        'name_es': 'Mazda 6',
                        'name_ru': 'Mazda 6',
                        'price': '49.990',
                        'week_price': '254.943',
                        'month_price': '1.124.775',
                        'threemonth_price': '974.805',
                        'description': {
                            'en': 'Mid-size sedan',
                            'es': 'Sed√°n mediano',
                            'ru': '–°—Ä–µ–¥–Ω–∏–π —Å–µ–¥–∞–Ω'
                        },
                        'image': 'public/images/mazda6.png'
                    },
                    {
                        'name': 'Subaru Impreza',
                        'name_es': 'Subaru Impreza',
                        'name_ru': 'Subaru Impreza',
                        'price': '49.990',
                        'week_price': '254.943',
                        'month_price': '1.124.775',
                        'threemonth_price': '974.805',
                        'description': {
                            'en': 'Compact hatchback',
                            'es': 'Hatchback compacto',
                            'ru': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ö—ç—Ç—á–±–µ–∫'
                        },
                        'image': 'public/images/Impreza.jpeg'
                    },
                    {
                        'name': 'Lexus ES 350',
                        'name_es': 'Lexus ES 350',
                        'name_ru': 'Lexus ES 350',
                        'price': '54.990',
                        'week_price': '280.743',
                        'month_price': '1.237.275',
                        'threemonth_price': '1.073.535',
                        'description': {
                            'en': 'Premium sedan',
                            'es': 'Sed√°n premium',
                            'ru': '–ü—Ä–µ–º–∏—É–º —Å–µ–¥–∞–Ω'
                        },
                        'image': 'public/images/lexuses.png'
                    }
                ],
                'suv': [
                    {
                        'name': 'Mazda CX-9',
                        'name_es': 'Mazda CX-9',
                        'name_ru': 'Mazda CX-9',
                        'price': '119.990',
                        'week_price': '622.743',
                        'month_price': '2.699.775',
                        'threemonth_price': '2.339.805',
                        'description': {
                            'en': 'Large SUV, 7 seats',
                            'es': '7 asientos, SUV grande',
                            'ru': '–ë–æ–ª—å—à–æ–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫, 7 –º–µ—Å—Ç'
                        },
                        'image': 'public/images/mazda9.png'
                    },
                    {
                        'name': 'Mitsubishi Outlander',
                        'name_es': 'Mitsubishi Outlander',
                        'name_ru': 'Mitsubishi Outlander',
                        'price': '71.990',
                        'week_price': '373.143',
                        'month_price': '1.619.775',
                        'threemonth_price': '1.405.035',
                        'description': {
                            'en': 'Mid-size SUV',
                            'es': 'SUV mediano',
                            'ru': '–°—Ä–µ–¥–Ω–∏–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫'
                        },
                        'image': 'public/images/mitsubishi.png'
                    },
                    {
                        'name': 'Subaru Outback',
                        'name_es': 'Subaru Outback',
                        'name_ru': 'Subaru Outback',
                        'price': '64.990',
                        'week_price': '336.543',
                        'month_price': '1.464.775',
                        'threemonth_price': '1.264.305',
                        'description': {
                            'en': 'Wagon/Crossover 4x4',
                            'es': 'Wagon/Crossover 4x4',
                            'ru': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª/–ö—Ä–æ—Å—Å–æ–≤–µ—Ä 4x4'
                        },
                        'image': 'public/images/subaruoutback.png'
                    },
                    {
                        'name': 'Toyota RAV4',
                        'name_es': 'Toyota RAV4',
                        'name_ru': 'Toyota RAV4',
                        'price': '71.990',
                        'week_price': '373.143',
                        'month_price': '1.619.775',
                        'threemonth_price': '1.405.035',
                        'description': {
                            'en': 'Compact SUV',
                            'es': 'SUV compacto',
                            'ru': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫'
                        },
                        'image': 'public/images/toyota.png'
                    }
                ]
            }

            # Category titles in different languages
            category_titles = {
                'premium': {
                    'en': 'üéØ Premium Category',
                    'es': 'üéØ Categor√≠a Premium',
                    'ru': 'üéØ –ü—Ä–µ–º–∏—É–º –ö–∞—Ç–µ–≥–æ—Ä–∏—è'
                },
                'economy': {
                    'en': 'üí∞ Economy Category',
                    'es': 'üí∞ Categor√≠a Econ√≥mica',
                    'ru': 'üí∞ –≠–∫–æ–Ω–æ–º –ö–∞—Ç–µ–≥–æ—Ä–∏—è'
                },
                'suv': {
                    'en': 'üöô SUV Category',
                    'es': 'üöô Categor√≠a SUV',
                    'ru': 'üöô –ö–∞—Ç–µ–≥–æ—Ä–∏—è –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–æ–≤'
                }
            }

            # Price period descriptions
            price_periods = {
                'en': {
                    'day': 'per day',
                    'week': '6 days (15% off)',
                    'month': '30 days (25% off)',
                    'threemonth': '3+ months (35% off)'
                },
                'es': {
                    'day': 'por d√≠a',
                    'week': '6 d√≠as (15% desc.)',
                    'month': '30 d√≠as (25% desc.)',
                    'threemonth': '+3 meses (35% desc.)'
                },
                'ru': {
                    'day': '–≤ –¥–µ–Ω—å',
                    'week': '6 –¥–Ω–µ–π (—Å–∫–∏–¥–∫–∞ 15%)',
                    'month': '30 –¥–Ω–µ–π (—Å–∫–∏–¥–∫–∞ 25%)',
                    'threemonth': '3+ –º–µ—Å—è—Ü–∞ (—Å–∫–∏–¥–∫–∞ 35%)'
                }
            }

            # Send a message for each car with its photo
            first_message = True
            for category, category_cars in cars.items():
                # Send category header
                header = f"*{category_titles[category][language]}*"
                if first_message:
                    await query.edit_message_text(header, parse_mode=ParseMode.MARKDOWN)
                    first_message = False
                else:
                    await query.message.reply_text(header, parse_mode=ParseMode.MARKDOWN)

                # Send each car in the category
                for car in category_cars:
                    car_name = car[f'name_{language}'] if language in ['es', 'ru'] else car['name']
                    message = f"""
{car_name}
üìù {car['description'][language]}

üí∞ {price_labels[language]['prices']}:
‚Ä¢ {car['price']} {price_labels[language]['currency']} - {price_labels[language]['per_day']}
‚Ä¢ {car['week_price']} {price_labels[language]['currency']} - {price_labels[language]['week']}
‚Ä¢ {car['month_price']} {price_labels[language]['currency']} - {price_labels[language]['month']}
‚Ä¢ {car['threemonth_price']} {price_labels[language]['currency']} - {price_labels[language]['threemonth']}
"""
                    with open(car['image'], 'rb') as photo:
                        await query.message.reply_photo(
                            photo=photo,
                            caption=message,
                            parse_mode=ParseMode.MARKDOWN
                        )

            # Send final message with back button
            await query.message.reply_text(
                "_Click the button below to return to the main menu_",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_back_to_menu_keyboard(language)
            )

        except Exception as e:
            logger.error(f"Error showing car fleet: {e}")
            raise
    
    async def show_conditions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show rental conditions"""
        try:
            query = update.callback_query
            await query.answer()
            
            language = self.get_user_language(query.from_user.id)
            
            messages = {
                'en': """
*üìã Rental Terms*

*Requirements:*
‚Ä¢ ü™™ Valid driver's license
‚Ä¢ üéÇ Minimum age: 21 years
‚Ä¢ üí≥ Credit card required for deposit (for Latin American residents)
  _Alternative documentation may be accepted without a credit card - please check with our manager_
‚Ä¢ ‚úÖ No credit cards required for international tourists
‚Ä¢ üõÇ Valid passport/ID

*Insurance:*
‚Ä¢ ‚úÖ Basic insurance included
‚Ä¢ ‚ûï Additional coverage available

*Fuel Policy:*
‚Ä¢ ‚õΩ Full-to-full: receive with a full tank, return with a full tank

*Mileage:*
‚Ä¢ ‚ôæÔ∏è Unlimited mileage plan included
‚Ä¢ üìè Limited mileage plans also available

*Deposit:*
‚Ä¢ üí≥ Security deposit held on credit card (for Latin American residents)
‚Ä¢ üíµ Deposit amount: from 550,000 to 1,000,000 CLP (depending on vehicle category)""",

                'es': """
*üìã T√©rminos de Alquiler*

*Requisitos:*
‚Ä¢ ü™™ Licencia de conducir v√°lida
‚Ä¢ üéÇ Edad m√≠nima: 21 a√±os
‚Ä¢ üí≥ Tarjeta de cr√©dito requerida para dep√≥sito (para residentes de Am√©rica Latina)
  _Se puede aceptar documentaci√≥n alternativa sin tarjeta de cr√©dito - consulte con nuestro gerente_
‚Ä¢ ‚úÖ No se requieren tarjetas de cr√©dito para turistas internacionales
‚Ä¢ üõÇ Pasaporte/DNI v√°lido

*Seguro:*
‚Ä¢ ‚úÖ Seguro b√°sico incluido
‚Ä¢ ‚ûï Coberturas adicionales disponibles

*Pol√≠tica de Combustible:*
‚Ä¢ ‚õΩ Tanque lleno a lleno: recibe con tanque lleno, devuelve con tanque lleno

*Kilometraje:*
‚Ä¢ ‚ôæÔ∏è Plan de kilometraje ilimitado incluido
‚Ä¢ üìè Planes de kilometraje limitado tambi√©n disponibles

*Dep√≥sito:*
‚Ä¢ üí≥ Dep√≥sito de seguridad retenido en tarjeta de cr√©dito (para residentes de Am√©rica Latina)
‚Ä¢ üíµ Monto del dep√≥sito: desde 550.000 hasta 1.000.000 CLP (seg√∫n categor√≠a del veh√≠culo)""",

                'ru': """
*üìã –£—Å–ª–æ–≤–∏—è –ê—Ä–µ–Ω–¥—ã*

*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ ü™™ –î–µ–π—Å—Ç–≤—É—é—â–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞
‚Ä¢ üéÇ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: 21 –≥–æ–¥
‚Ä¢ üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ (–¥–ª—è –∂–∏—Ç–µ–ª–µ–π –õ–∞—Ç–∏–Ω—Å–∫–æ–π –ê–º–µ—Ä–∏–∫–∏)
  _–í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–µ–∑ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã - —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞_
‚Ä¢ ‚úÖ –î–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Ç—É—Ä–∏—Å—Ç–æ–≤ –∫—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è
‚Ä¢ üõÇ –î–µ–π—Å—Ç–≤—É—é—â–∏–π –ø–∞—Å–ø–æ—Ä—Ç/—É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏

*–°—Ç—Ä–∞—Ö–æ–≤–∫–∞:*
‚Ä¢ ‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
‚Ä¢ ‚ûï –î–æ—Å—Ç—É–ø–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ

*–¢–æ–ø–ª–∏–≤–Ω–∞—è –ü–æ–ª–∏—Ç–∏–∫–∞:*
‚Ä¢ ‚õΩ –ü–æ–ª–Ω—ã–π –±–∞–∫-–ø–æ–ª–Ω—ã–π –±–∞–∫: –ø–æ–ª—É—á–∞–µ—Ç–µ —Å –ø–æ–ª–Ω—ã–º –±–∞–∫–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ —Å –ø–æ–ª–Ω—ã–º –±–∞–∫–æ–º

*–ü—Ä–æ–±–µ–≥:*
‚Ä¢ ‚ôæÔ∏è –í–∫–ª—é—á–µ–Ω –ø–ª–∞–Ω —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –ø—Ä–æ–±–µ–≥–æ–º
‚Ä¢ üìè –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–ª–∞–Ω—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –ø—Ä–æ–±–µ–≥–æ–º

*–î–µ–ø–æ–∑–∏—Ç:*
‚Ä¢ üí≥ –°—Ç—Ä–∞—Ö–æ–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ (–¥–ª—è –∂–∏—Ç–µ–ª–µ–π –õ–∞—Ç–∏–Ω—Å–∫–æ–π –ê–º–µ—Ä–∏–∫–∏)
‚Ä¢ üíµ –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: –æ—Ç 550.000 –¥–æ 1.000.000 CLP (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è)"""
            }
            
            await query.message.edit_text(
                messages[language],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_back_to_menu_keyboard(language)
            )
        except Exception as e:
            logger.error(f"Error showing conditions: {e}")
            raise
    
    async def show_payment_methods(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show payment methods"""
        try:
            query = update.callback_query
            await query.answer()
            
            language = self.get_user_language(query.from_user.id)
            
            messages = {
                'en': """
*üí≥ Payment Methods*

We accept the following payment methods:

*For Latin American Residents:*
‚Ä¢ üí≥ Credit Cards
‚Ä¢ üí≥ Debit Cards
‚Ä¢ üè¶ Bank Transfer
‚Ä¢ üåê WebPay

*For International Tourists:*
‚Ä¢ üíµ Cash (USD, EUR, RUB)
‚Ä¢ üè¶ International Wire Transfer
‚Ä¢ üåê PayPal
‚Ä¢ üíé USDT (Tether)
  _Network options: TRC20, ERC20, BEP20_

*Exchange Rates:*
‚Ä¢ Daily rates according to the Central Bank
‚Ä¢ Cryptocurrency rates according to Binance""",

                'es': """
*üí≥ M√©todos de Pago*

Aceptamos los siguientes m√©todos de pago:

*Para Residentes de Am√©rica Latina:*
‚Ä¢ üí≥ Tarjetas de Cr√©dito
‚Ä¢ üí≥ Tarjetas de D√©bito
‚Ä¢ üè¶ Transferencia Bancaria
‚Ä¢ üåê WebPay

*Para Turistas Internacionales:*
‚Ä¢ üíµ Efectivo (USD, EUR, RUB)
‚Ä¢ üè¶ Transferencia Internacional
‚Ä¢ üåê PayPal
‚Ä¢ üíé USDT (Tether)
  _Opciones de red: TRC20, ERC20, BEP20_

*Tipos de Cambio:*
‚Ä¢ Tasas diarias seg√∫n el Banco Central
‚Ä¢ Tasas de criptomonedas seg√∫n Binance""",

                'ru': """
*üí≥ –°–ø–æ—Å–æ–±—ã –û–ø–ª–∞—Ç—ã*

–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:

*–î–ª—è –ñ–∏—Ç–µ–ª–µ–π –õ–∞—Ç–∏–Ω—Å–∫–æ–π –ê–º–µ—Ä–∏–∫–∏:*
‚Ä¢ üí≥ –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã
‚Ä¢ üí≥ –î–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã
‚Ä¢ üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
‚Ä¢ üåê WebPay

*–î–ª—è –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –¢—É—Ä–∏—Å—Ç–æ–≤:*
‚Ä¢ üíµ –ù–∞–ª–∏—á–Ω—ã–µ (USD, EUR, RUB)
‚Ä¢ üè¶ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
‚Ä¢ üåê PayPal
‚Ä¢ üíé USDT (Tether)
  _–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ—Ç–∏: TRC20, ERC20, BEP20_

*–ö—É—Ä—Å—ã –û–±–º–µ–Ω–∞:*
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º—É –ë–∞–Ω–∫—É
‚Ä¢ –ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ Binance"""
            }
            
            await query.message.edit_text(
                messages[language],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_back_to_menu_keyboard(language)
            )
        except Exception as e:
            logger.error(f"Error showing payment methods: {e}")
            raise
    
    async def show_contact_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show contact information"""
        try:
            query = update.callback_query
            await query.answer()
            
            language = self.get_user_language(query.from_user.id)

            # Contact info for each language
            if language == 'ru':
                text = "üöó RentCar Chile\n\n"
                text += "üìç –ê–¥—Ä–µ—Å: Santiago, Chile\n"
                text += "üì± WhatsApp: +56982567485\n"
                text += "üí¨ Telegram: @rentcar_chile\n\n"
                text += "üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n"
                text += "‚Ä¢ –ù–∞–ª–∏—á–Ω—ã–µ (USD, EUR, RUB)\n"
                text += "‚Ä¢ USDT (TRC20, ERC20, BEP20)\n"
                text += "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥\n\n"
                text += "‚úÖ –ì–æ–≤–æ—Ä–∏–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ\n"
                text += "‚è∞ –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö"

                keyboard = [
                    [InlineKeyboardButton("üí¨ Telegram", url="https://t.me/rentcar_chile")],
                    [InlineKeyboardButton("üì± WhatsApp", url="https://wa.me/56982567485")],
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            elif language == 'es':
                text = "üöó RentCar Chile\n\n"
                text += "üìç Direcci√≥n: Santiago, Chile\n"
                text += "üì± WhatsApp: +56921701913\n\n"
                text += "üí≥ M√©todos de pago:\n"
                text += "‚Ä¢ Efectivo\n"
                text += "‚Ä¢ Transferencia bancaria\n"
                text += "‚Ä¢ Tarjetas de cr√©dito/d√©bito\n"
                text += "‚Ä¢ WebPay\n\n"
                text += "‚úÖ Hablamos espa√±ol e ingl√©s\n"
                text += "‚è∞ Abierto todos los d√≠as"

                keyboard = [
                    [InlineKeyboardButton("üì± WhatsApp", url="https://wa.me/56921701913")],
                    [InlineKeyboardButton("üîô Volver al Men√∫", callback_data="main_menu")]
                ]
            else:  # English
                text = "üöó RentCar Chile\n\n"
                text += "üìç Address: Santiago, Chile\n"
                text += "üì± WhatsApp: +56921701913\n\n"
                text += "üí≥ Payment methods:\n"
                text += "‚Ä¢ Cash\n"
                text += "‚Ä¢ Bank transfer\n"
                text += "‚Ä¢ Credit/Debit cards\n"
                text += "‚Ä¢ WebPay\n\n"
                text += "‚úÖ We speak English and Spanish\n"
                text += "‚è∞ Open every day"

                keyboard = [
                    [InlineKeyboardButton("üì± WhatsApp", url="https://wa.me/56921701913")],
                    [InlineKeyboardButton("üîô Back to Menu", callback_data="main_menu")]
                ]

            await query.message.edit_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        except Exception as e:
            logger.error(f"Error in contact info: {e}")
            try:
                # Simplified fallback message
                if language == 'ru':
                    text = "üöó RentCar Chile\n"
                    text += "üì± WhatsApp: +56982567485\n"
                    text += "üí¨ Telegram: @rentcar_chile"
                    keyboard = [
                        [InlineKeyboardButton("üí¨ Telegram", url="https://t.me/rentcar_chile")],
                        [InlineKeyboardButton("üì± WhatsApp", url="https://wa.me/56982567485")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                    ]
                else:
                    text = "üöó RentCar Chile\n"
                    text += "üì± WhatsApp: +56921701913"
                    keyboard = [
                        [InlineKeyboardButton("üì± WhatsApp", url="https://wa.me/56921701913")],
                        [InlineKeyboardButton("üîô Back", callback_data="main_menu")]
                    ]
                
                await query.message.edit_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e2:
                logger.error(f"Error in fallback contact info: {e2}")
                await query.answer("Please try again later.", show_alert=True)
    
    async def show_categories(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show car categories"""
        query = update.callback_query
        await query.answer()
        
        message = "*Choose a car category:*\n\n"
        for category_id, category_info in CAR_CATEGORIES.items():
            message += f"‚Ä¢ *{category_info['name']}* - ${category_info['price_per_day']}/day\n"
            message += f"  {category_info['description']}\n\n"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_car_categories_keyboard()
        )
    
    async def show_cars_in_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show cars in selected category"""
        try:
            query = update.callback_query
            await query.answer()
            
            category = query.data.split('_')[1]
            language = self.get_user_language(query.from_user.id)
            
            messages = {
                'en': f"*Available {CAR_CATEGORIES[category]['name'][language]} Cars*\n\nPlease select a car:",
                'es': f"*Autos {CAR_CATEGORIES[category]['name'][language]} Disponibles*\n\nPor favor seleccione un auto:",
                'ru': f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ {CAR_CATEGORIES[category]['name'][language]}*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å:"
            }
            
            # Get cars for this category
            cars = {
                'premium': [
                    {'id': 'gac_white', 'name': 'GAC All New GS8 (White)', 'price': '149.990'},
                    {'id': 'gac_black', 'name': 'GAC All New GS8 (Black)', 'price': '149.990'},
                    {'id': 'lexus_rx', 'name': 'Lexus RX 450 H', 'price': '135.990'}
                ],
                'economy': [
                    {'id': 'chevrolet', 'name': 'Chevrolet Cavalier', 'price': '49.990'},
                    {'id': 'cherry', 'name': 'Cherry Tiggo 2 Pro Max', 'price': '49.990'},
                    {'id': 'honda', 'name': 'Honda Accord', 'price': '34.990'},
                    {'id': 'mazda6', 'name': 'Mazda 6', 'price': '49.990'},
                    {'id': 'subaru', 'name': 'Subaru Impreza', 'price': '49.990'},
                    {'id': 'lexus_es', 'name': 'Lexus ES 350', 'price': '54.990'}
                ],
                'suv': [
                    {'id': 'mazda_cx9', 'name': 'Mazda CX-9', 'price': '119.990'},
                    {'id': 'mitsubishi', 'name': 'Mitsubishi Outlander', 'price': '71.990'},
                    {'id': 'subaru_out', 'name': 'Subaru Outback', 'price': '64.990'},
                    {'id': 'toyota', 'name': 'Toyota RAV4', 'price': '71.990'}
                ]
            }
            
            # Create keyboard with cars
            keyboard = []
            for car in cars[category]:
                keyboard.append([InlineKeyboardButton(
                    f"{car['name']} - {car['price']} CLP/day",
                    callback_data=f"car_{car['id']}"
                )])
            keyboard.append([InlineKeyboardButton(MENU_TRANSLATIONS['back_to_menu'][language], callback_data="main_menu")])
            
            await query.message.edit_text(
                messages[language],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return CHOOSING_CAR
            
        except Exception as e:
            logger.error(f"Error showing cars in category: {e}")
            raise

    async def handle_car_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle car selection and ask for dates"""
        try:
            query = update.callback_query
            await query.answer()
            
            car_id = query.data.split('_')[1]
            context.user_data['selected_car'] = car_id
            
            language = self.get_user_language(query.from_user.id)
            
            messages = {
                'en': """*üìÖ Select Dates*

Please enter your desired rental dates in the format:
DD.MM.YYYY - DD.MM.YYYY

Example: 25.12.2023 - 30.12.2023""",
                'es': """*üìÖ Seleccionar Fechas*

Por favor ingrese las fechas deseadas en el formato:
DD.MM.YYYY - DD.MM.YYYY

Ejemplo: 25.12.2023 - 30.12.2023""",
                'ru': """*üìÖ –í—ã–±–æ—Ä –î–∞—Ç*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –¥–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
DD.MM.YYYY - DD.MM.YYYY

–ü—Ä–∏–º–µ—Ä: 25.12.2023 - 30.12.2023"""
            }
            
            keyboard = [[InlineKeyboardButton(MENU_TRANSLATIONS['back_to_menu'][language], callback_data="main_menu")]]
            
            await query.message.edit_text(
                messages[language],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return SELECTING_DATES
            
        except Exception as e:
            logger.error(f"Error handling car selection: {e}")
            raise

    async def handle_dates_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle dates input and show privacy policy"""
        try:
            if not update.message:
                return SELECTING_DATES
            
            text = update.message.text
            print(f"üîç Processing dates: {text}")
            
            try:
                start_date_str, end_date_str = text.split(' - ')
                start_date = datetime.strptime(start_date_str.strip(), '%d.%m.%Y')
                end_date = datetime.strptime(end_date_str.strip(), '%d.%m.%Y')
                
                # Calculate full 24h periods
                duration_timedelta = end_date - start_date
                duration = duration_timedelta.days  # This will give us full 24h periods
                
                if duration < 1:
                    raise ValueError("Invalid duration")
                
                print(f"‚úÖ Valid dates: {start_date} - {end_date}, duration: {duration} days")
                
                # Store dates and duration
                context.user_data['dates'] = text
                context.user_data['duration'] = duration
                context.user_data['start_date'] = start_date.strftime('%d.%m.%Y')
                context.user_data['end_date'] = end_date.strftime('%d.%m.%Y')
                
                # Get car price and calculate total with discounts
                car_id = context.user_data.get('selected_car')
                base_price = 0
                
                # Find car price from our categories
                for category, cars in {
                    'premium': [
                        {'id': 'gac_white', 'price': 149990},
                        {'id': 'gac_black', 'price': 149990},
                        {'id': 'lexus_rx', 'price': 135990}
                    ],
                    'economy': [
                        {'id': 'chevrolet', 'price': 49990},
                        {'id': 'cherry', 'price': 49990},
                        {'id': 'honda', 'price': 34990},
                        {'id': 'mazda6', 'price': 49990},
                        {'id': 'subaru', 'price': 49990},
                        {'id': 'lexus_es', 'price': 54990}
                    ],
                    'suv': [
                        {'id': 'mazda_cx9', 'price': 119990},
                        {'id': 'mitsubishi', 'price': 71990},
                        {'id': 'subaru_out', 'price': 64990},
                        {'id': 'toyota', 'price': 71990}
                    ]
                }.items():
                    for car in cars:
                        if car['id'] == car_id:
                            base_price = car['price']
                            break
                
                # Calculate discount
                discount = 0
                if duration >= 90:  # 3+ months
                    discount = 35
                elif duration >= 30:  # 1 month
                    discount = 25
                elif duration >= 6:  # 6+ days
                    discount = 15
                
                # Calculate total price
                daily_price = base_price
                total_price = daily_price * duration
                if discount > 0:
                    total_price = total_price * (1 - discount/100)
                
                # Store prices in context
                context.user_data['base_price'] = base_price
                context.user_data['total_price'] = total_price
                context.user_data['discount'] = discount
                
                # Show privacy policy and ask for agreement
                language = self.get_user_language(update.effective_user.id)
                print(f"üåê User language: {language}")
                
                messages = {
                    'en': """*üìã Privacy Agreement Required*

Before proceeding with your booking, we need to collect some personal information.

Please review our privacy policy and confirm your agreement to continue.""",
                    'es': """*üìã Acuerdo de Privacidad Requerido*

Antes de continuar con su reserva, necesitamos recopilar algunos datos personales.

Por favor revise nuestra pol√≠tica de privacidad y confirme su acuerdo para continuar.""",
                    'ru': """*üìã –¢—Ä–µ–±—É–µ—Ç—Å—è –°–æ–≥–ª–∞—Å–∏–µ —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*

–ü–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."""
                }

                # Create keyboard with privacy options
                agree_messages = {
                    'en': {'view': 'üìã View Privacy Policy', 'agree': '‚úÖ I Agree & Continue', 'cancel': '‚ùå Cancel'},
                    'es': {'view': 'üìã Ver Pol√≠tica de Privacidad', 'agree': '‚úÖ Acepto y Contin√∫o', 'cancel': '‚ùå Cancelar'},
                    'ru': {'view': 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ü–æ–ª–∏—Ç–∏–∫—É', 'agree': '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω –∏ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'cancel': '‚ùå –û—Ç–º–µ–Ω–∞'}
                }

                keyboard = [
                    [InlineKeyboardButton(agree_messages[language]['view'], callback_data="view_privacy")],
                    [InlineKeyboardButton(agree_messages[language]['agree'], callback_data="accept_privacy")],
                    [InlineKeyboardButton(agree_messages[language]['cancel'], callback_data="main_menu")]
                ]

                print("üì§ Sending privacy agreement message")
                await update.message.reply_text(
                    messages[language],
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                print("‚úÖ Privacy agreement message sent")
                
                return VIEWING_PRIVACY

            except Exception as date_error:
                print(f"‚ùå Date parsing error: {str(date_error)}")
                logger.error(f"Date parsing error: {date_error}")
                language = self.get_user_language(update.effective_user.id)
                error_messages = {
                    'en': "‚ùå Invalid date format. Please use: DD.MM.YYYY - DD.MM.YYYY\nNote: Duration is calculated in full 24-hour periods.",
                    'es': "‚ùå Formato de fecha inv√°lido. Use: DD.MM.YYYY - DD.MM.YYYY\nNota: La duraci√≥n se calcula en per√≠odos completos de 24 horas.",
                    'ru': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: DD.MM.YYYY - DD.MM.YYYY\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–º–∏ 24-—á–∞—Å–æ–≤—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏."
                }
                await update.message.reply_text(error_messages[language])
                return SELECTING_DATES

        except Exception as e:
            print(f"‚ùå Error in handle_dates_input: {str(e)}")
            logger.error(f"Error handling dates input: {e}")
            raise

    async def handle_personal_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle personal information and show booking confirmation"""
        try:
            if not update.message:
                return ENTERING_PERSONAL_INFO
            
            text = update.message.text
            context.user_data['personal_info'] = text
            
            # Get all booking information
            car_id = context.user_data.get('selected_car')
            dates = context.user_data.get('dates')
            duration = context.user_data.get('duration')
            base_price = context.user_data.get('base_price')
            total_price = context.user_data.get('total_price')
            discount = context.user_data.get('discount')
            personal_info = context.user_data.get('personal_info')
            
            language = self.get_user_language(update.effective_user.id)
            
            # Format price information
            price_info = f"üí∞ *Price Details:*\n"
            price_info += f"‚Ä¢ Base price: {base_price:,.0f} CLP/day\n"
            price_info += f"‚Ä¢ Duration: {duration} days\n"
            if discount > 0:
                price_info += f"‚Ä¢ Discount: {discount}%\n"
            price_info += f"‚Ä¢ Total price: {total_price:,.0f} CLP"
            
            # Format confirmation message
            messages = {
                'en': f"""*üéâ Booking Request Summary*

*Selected Car:* {car_id}
*Dates:* {dates}
({duration} days)

{price_info}

*Personal Information:*
{personal_info}

Would you like to confirm this booking?""",
                'es': f"""*üéâ Resumen de la Solicitud*

*Auto Seleccionado:* {car_id}
*Fechas:* {dates}
({duration} d√≠as)

{price_info}

*Informaci√≥n Personal:*
{personal_info}

¬øDesea confirmar esta reserva?""",
                'ru': f"""*üéâ –°–≤–æ–¥–∫–∞ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è*

*–í—ã–±—Ä–∞–Ω–Ω—ã–π –ê–≤—Ç–æ–º–æ–±–∏–ª—å:* {car_id}
*–î–∞—Ç—ã:* {dates}
({duration} –¥–Ω–µ–π)

{price_info}

*–õ–∏—á–Ω–∞—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
{personal_info}

–•–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?"""
            }
            
            # Create confirmation keyboard
            confirm_messages = {
                'en': {'confirm': '‚úÖ Confirm Booking', 'cancel': '‚ùå Cancel'},
                'es': {'confirm': '‚úÖ Confirmar Reserva', 'cancel': '‚ùå Cancelar'},
                'ru': {'confirm': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'cancel': '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'}
            }
            
            keyboard = [
                [InlineKeyboardButton(confirm_messages[language]['confirm'], callback_data="confirm_booking")],
                [InlineKeyboardButton(confirm_messages[language]['cancel'], callback_data="main_menu")]
            ]
            
            await update.message.reply_text(
                messages[language],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return CONFIRMING_BOOKING
            
        except Exception as e:
            logger.error(f"Error handling personal info: {e}")
            raise

    async def confirm_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle booking confirmation and send to admin"""
        try:
            query = update.callback_query
            await query.answer()
            
            # Get all booking information
            car_id = context.user_data.get('selected_car')
            dates = context.user_data.get('dates')
            duration = context.user_data.get('duration')
            base_price = context.user_data.get('base_price')
            total_price = context.user_data.get('total_price')
            discount = context.user_data.get('discount')
            personal_info = context.user_data.get('personal_info')
            
            # Format price information for admin
            price_info = f"üí∞ *Price Details:*\n"
            price_info += f"‚Ä¢ Base price: {base_price:,.0f} CLP/day\n"
            price_info += f"‚Ä¢ Duration: {duration} days\n"
            if discount > 0:
                price_info += f"‚Ä¢ Discount: {discount}%\n"
            price_info += f"‚Ä¢ Total price: {total_price:,.0f} CLP"
            
            # Format admin message
            admin_message = f"""üö® *New Booking Request*

üöó *Selected Car:* {car_id}
üìÖ *Dates:* {dates}
‚è≥ *Duration:* {duration} days

{price_info}

üë§ *Client Information:*
{personal_info}

üì± *Telegram:* @{update.effective_user.username if update.effective_user.username else 'N/A'}
‚è∞ *Request Time:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""

            print(f"üì§ Sending booking request to admin chat: {ADMIN_CHAT_ID}")
            print(f"üìÑ Message content: {admin_message}")

            # Send to admin chat
            try:
                sent_message = await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=admin_message,
                    parse_mode=ParseMode.MARKDOWN
                )
                print(f"‚úÖ Successfully sent message to admin chat. Message ID: {sent_message.message_id}")
            except Exception as e:
                print(f"‚ùå Error sending to admin chat: {str(e)}")
                logger.error(f"Error sending to admin chat: {e}")
                # Try sending without markdown
                try:
                    sent_message = await context.bot.send_message(
                        chat_id=ADMIN_CHAT_ID,
                        text=f"üö® New Booking Request\n\n{admin_message}",
                        parse_mode=None
                    )
                    print("‚úÖ Sent plain text message to admin chat")
                except Exception as e2:
                    print(f"‚ùå Error sending plain text: {str(e2)}")
                    logger.error(f"Error sending plain text message: {e2}")

            # Send confirmation to user
            language = self.get_user_language(query.from_user.id)
            confirmation_messages = {
                'en': "‚úÖ Thank you! Your booking request has been received.\n\nOur team will contact you shortly to confirm the details.",
                'es': "‚úÖ ¬°Gracias! Hemos recibido su solicitud de reserva.\n\nNuestro equipo se pondr√° en contacto con usted pronto para confirmar los detalles.",
                'ru': "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω.\n\n–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
            }
            
            await query.message.edit_text(
                confirmation_messages[language],
                reply_markup=get_main_menu_keyboard(language)
            )
            
            # Clear user data
            context.user_data.clear()
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error confirming booking: {e}")
            raise

    async def show_user_bookings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show user's bookings"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        bookings = self.db.get_user_bookings(user_id)
        
        if not bookings:
            await query.edit_message_text(
                "üì≠ You don't have any bookings yet.\n\nStart by browsing our available cars!",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        message = "*Your Bookings:*\n\n"
        keyboard = []
        
        for booking in bookings:
            booking_id, user_id, car_id, start_date, end_date, total_price, status, payment_method, payment_status, created_at, model, brand, year = booking
            
            message += f"""
üìã *Booking #{booking_id}*
üöó {brand} {model} ({year})
üìÖ {start_date} to {end_date}
üí∞ ${total_price:.2f}
üìä Status: {BOOKING_STATUS.get(status, status)}
üí≥ Payment: {payment_method}
            """
            
            if status in ['pending', 'confirmed']:
                keyboard.append([InlineKeyboardButton(f"‚ùå Cancel #{booking_id}", callback_data=f"cancel_booking_{booking_id}")])
            elif status == 'completed':
                keyboard.append([InlineKeyboardButton(f"‚≠ê Review #{booking_id}", callback_data=f"leave_review_{booking_id}")])
        
        keyboard.append([InlineKeyboardButton("üè† Main Menu", callback_data="main_menu")])
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def cancel_booking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel a booking"""
        query = update.callback_query
        await query.answer()
        
        booking_id = int(query.data.split('_')[2])
        user_id = query.from_user.id
        
        if self.db.cancel_booking(booking_id, user_id):
            await query.edit_message_text(
                "‚úÖ Booking cancelled successfully!",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await query.edit_message_text(
                "‚ùå Failed to cancel booking. Please try again.",
                reply_markup=get_main_menu_keyboard()
            )
    
    async def show_reviews_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show reviews menu"""
        query = update.callback_query
        await query.answer()
        
        message = """
‚≠ê *Reviews & Ratings*

Here you can:
‚Ä¢ View reviews for specific cars
‚Ä¢ Leave reviews for your completed bookings
‚Ä¢ See overall customer satisfaction

What would you like to do?
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä View Car Reviews", callback_data="browse_cars")],
            [InlineKeyboardButton("üîô Back to Main Menu", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def show_car_reviews(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show reviews for a specific car"""
        query = update.callback_query
        await query.answer()
        
        car_id = int(query.data.split('_')[2])
        reviews = self.db.get_car_reviews(car_id)
        car = self.db.get_car(car_id)
        
        if not reviews:
            await query.edit_message_text(
                f"No reviews yet for {car[2]} {car[1]}.\n\nBe the first to leave a review!",
                reply_markup=get_car_detail_keyboard(car_id)
            )
            return
        
        message = f"*Reviews for {car[2]} {car[1]}:*\n\n"
        
        for review in reviews:
            rating = review[4]
            comment = review[5]
            reviewer_name = f"{review[7]} {review[8]}" if review[7] and review[8] else "Anonymous"
            
            message += f"‚≠ê {'‚≠ê' * rating}{'‚òÜ' * (5 - rating)}\n"
            message += f"üë§ {reviewer_name}\n"
            if comment:
                message += f"üí¨ {comment}\n"
            message += "‚îÄ" * 30 + "\n"
        
        avg_rating = sum(review[4] for review in reviews) / len(reviews)
        message += f"\n*Average Rating: {avg_rating:.1f}/5*"
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_car_detail_keyboard(car_id)
        )
    
    async def show_help_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help menu"""
        try:
            query = update.callback_query
            await query.answer()
            
            message = """
‚ÑπÔ∏è *Help & Support*

Need help? Here's how to reach us:

‚Ä¢ üìû Call: +1 (555) 123-4567
‚Ä¢ üìß Email: support@carrental.com
‚Ä¢ üí¨ WhatsApp: +1 (555) 123-4567
‚Ä¢ üì± Telegram: @CarRentalSupport

Our support team is available:
Monday - Friday: 9:00 AM - 6:00 PM
"""
            await query.message.edit_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_back_to_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"Error showing help menu: {e}")
            raise
    
    async def handle_help_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle help topic selection"""
        query = update.callback_query
        await query.answer()
        
        topic = query.data.split('_')[1]
        
        if topic == "booking":
            message = """
üìñ *How to Book a Car*

1. **Browse Cars** - Choose from our available vehicles
2. **Select Category** - Pick economy, standard, premium, or SUV
3. **Choose Car** - View details and select your preferred vehicle
4. **Select Dates** - Pick your rental start and end dates
5. **Payment** - Choose your payment method
6. **Confirm** - Review and confirm your booking

*Requirements:*
‚Ä¢ Valid driver's license
‚Ä¢ Credit card for payment
‚Ä¢ Minimum age: 21 years
            """
        elif topic == "pricing":
            message = """
üí∞ *Pricing Information*

*Daily Rates:*
‚Ä¢ Economy: $50/day
‚Ä¢ Standard: $75/day  
‚Ä¢ Premium: $120/day
‚Ä¢ SUV: $100/day

*Additional Fees:*
‚Ä¢ Insurance: $15/day (optional)
‚Ä¢ Late return: $25/hour
‚Ä¢ Fuel: Pay for what you use
‚Ä¢ Cleaning: $25 (if needed)

*Discounts:*
‚Ä¢ Weekly rental: 10% off
‚Ä¢ Monthly rental: 20% off
            """
        elif topic == "terms":
            message = """
üìã *Terms & Conditions*

*Rental Requirements:*
‚Ä¢ Valid driver's license
‚Ä¢ Minimum age: 21 years
‚Ä¢ Credit card required
‚Ä¢ Proof of insurance

*Cancellation Policy:*
‚Ä¢ Free cancellation up to 24 hours before pickup
‚Ä¢ 50% refund for cancellations within 24 hours
‚Ä¢ No refund for no-shows

*Damage Policy:*
‚Ä¢ Customer responsible for damage during rental
‚Ä¢ Insurance available for additional protection
‚Ä¢ Pre-rental inspection required
            """
        else:
            message = "‚ùå Help topic not found."
        
        keyboard = [[InlineKeyboardButton("üîô Back to Help", callback_data="help")]]
        
        await query.edit_message_text(
            message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle errors"""
        try:
            error = context.error
            logger.error(f"Error: {error}")
            
            # Get the error message
            if isinstance(error, Exception):
                error_msg = str(error)
            else:
                error_msg = "An error occurred. Please try again."
            
            # Try to send error message
            if update and update.effective_chat:
                try:
                    if update.callback_query:
                        # For callback queries, try to edit the message first
                        try:
                            await update.callback_query.message.edit_text(
                                "Please use /start to show the menu.",
                                reply_markup=get_main_menu_keyboard('en')
                            )
                        except Exception:
                            # If editing fails, send a new message
                            await context.bot.send_message(
                                chat_id=update.effective_chat.id,
                                text="Please use /start to show the menu.",
                                reply_markup=get_main_menu_keyboard('en')
                            )
                    else:
                        # For regular messages
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text="Please use /start to show the menu.",
                            reply_markup=get_main_menu_keyboard('en')
                        )
                except Exception as send_error:
                    logger.error(f"Error sending error message: {send_error}")
        except Exception as e:
            logger.error(f"Error in error handler: {e}")

    async def start_review_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start the review process"""
        try:
            query = update.callback_query
            await query.answer()
            
            language = self.get_user_language(query.from_user.id)
            
            messages = {
                'en': """*‚≠ê Leave a Review*

Please rate your experience with our service from 1 to 4 stars:

1 ‚≠ê - Poor
2 ‚≠ê‚≠ê - Fair
3 ‚≠ê‚≠ê‚≠ê - Good
4 ‚≠ê‚≠ê‚≠ê‚≠ê - Excellent""",
                'es': """*‚≠ê Dejar una Rese√±a*

Por favor califique su experiencia con nuestro servicio de 1 a 4 estrellas:

1 ‚≠ê - Malo
2 ‚≠ê‚≠ê - Regular
3 ‚≠ê‚≠ê‚≠ê - Bueno
4 ‚≠ê‚≠ê‚≠ê‚≠ê - Excelente""",
                'ru': """*‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –û—Ç–∑—ã–≤*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –æ—Ç 1 –¥–æ 4 –∑–≤–µ–∑–¥:

1 ‚≠ê - –ü–ª–æ—Ö–æ
2 ‚≠ê‚≠ê - –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ
3 ‚≠ê‚≠ê‚≠ê - –•–æ—Ä–æ—à–æ
4 ‚≠ê‚≠ê‚≠ê‚≠ê - –û—Ç–ª–∏—á–Ω–æ"""
            }

            keyboard = [
                [InlineKeyboardButton("‚≠ê", callback_data="rate_1"),
                 InlineKeyboardButton("‚≠ê‚≠ê", callback_data="rate_2"),
                 InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="rate_3"),
                 InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_4")],
                [InlineKeyboardButton(MENU_TRANSLATIONS['back_to_menu'][language], callback_data="main_menu")]
            ]

            await query.message.edit_text(
                messages[language],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return SELECTING_RATING
            
        except Exception as e:
            logger.error(f"Error starting review process: {e}")
            raise

    async def handle_rating_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle rating selection"""
        try:
            query = update.callback_query
            await query.answer()
            
            rating = int(query.data.split('_')[1])
            context.user_data['rating'] = rating
            
            language = self.get_user_language(query.from_user.id)
            
            messages = {
                'en': f"""*üí≠ Leave a Comment*

You rated us {rating} {'‚≠ê' * rating}

Please write a brief comment about your experience:
‚Ä¢ What did you like?
‚Ä¢ What could we improve?
‚Ä¢ Would you recommend us?""",
                'es': f"""*üí≠ Dejar un Comentario*

Nos calific√≥ con {rating} {'‚≠ê' * rating}

Por favor escriba un breve comentario sobre su experiencia:
‚Ä¢ ¬øQu√© le gust√≥?
‚Ä¢ ¬øQu√© podr√≠amos mejorar?
‚Ä¢ ¬øNos recomendar√≠a?""",
                'ru': f"""*üí≠ –û—Å—Ç–∞–≤–∏—Ç—å –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*

–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞—Å –Ω–∞ {rating} {'‚≠ê' * rating}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ:
‚Ä¢ –ß—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?
‚Ä¢ –ß—Ç–æ –º—ã –º–æ–≥–ª–∏ –±—ã —É–ª—É—á—à–∏—Ç—å?
‚Ä¢ –ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ –±—ã –≤—ã –Ω–∞—Å?"""
            }

            keyboard = [
                [InlineKeyboardButton('üîÑ Change Rating', callback_data="change_rating")],
                [InlineKeyboardButton('üîô Back to Menu', callback_data="main_menu")]
            ]

            await query.message.edit_text(
                messages[language],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return ENTERING_REVIEW
            
        except Exception as e:
            logger.error(f"Error handling rating selection: {e}")
            raise

    async def handle_review_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle review text input"""
        try:
            if not update.message:
                return ENTERING_REVIEW

            rating = context.user_data.get('rating')
            review_text = update.message.text
            user_id = update.effective_user.id
            language = self.get_user_language(user_id)

            # Format review message for admin chat
            admin_review = f"""üìù *New Review Received*

‚≠ê *Rating:* {'‚≠ê' * rating} ({rating}/4)
üë§ *From:* @{update.effective_user.username if update.effective_user.username else 'N/A'}
üì± *User ID:* `{user_id}`
‚è∞ *Time:* {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üí≠ *Comment:*
{review_text}"""

            try:
                # Send to review chat
                await context.bot.send_message(
                    chat_id=REVIEW_CHAT_ID,
                    text=admin_review,
                    parse_mode=ParseMode.MARKDOWN
                )
                print(f"‚úÖ Review sent to chat {REVIEW_CHAT_ID}")
            except Exception as e:
                logger.error(f"Error sending review to admin chat: {e}")
                print(f"‚ùå Error sending review: {str(e)}")
                # Try sending without markdown
                try:
                    await context.bot.send_message(
                        chat_id=REVIEW_CHAT_ID,
                        text=f"New Review:\nRating: {rating}/4\nUser: @{update.effective_user.username}\nComment: {review_text}",
                        parse_mode=None
                    )
                    print("‚úÖ Review sent without markdown formatting")
                except Exception as e2:
                    logger.error(f"Error sending plain review: {e2}")
                    print(f"‚ùå Error sending plain review: {str(e2)}")

            # Send confirmation to user
            messages = {
                'en': f"""‚úÖ Thank you for your review!

Rating: {'‚≠ê' * rating}
Comment: {review_text}

Your feedback helps us improve our service.""",
                'es': f"""‚úÖ ¬°Gracias por su rese√±a!

Calificaci√≥n: {'‚≠ê' * rating}
Comentario: {review_text}

Sus comentarios nos ayudan a mejorar nuestro servicio.""",
                'ru': f"""‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!

–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {review_text}

–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å."""
            }

            await update.message.reply_text(
                messages[language],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_main_menu_keyboard(language)
            )

            return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error handling review text: {e}")
            print(f"‚ùå Error in handle_review_text: {str(e)}")
            raise

    async def skip_review_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Skip review text and submit only rating"""
        try:
            query = update.callback_query
            await query.answer()
            
            rating = context.user_data.get('rating')
            user_id = query.from_user.id
            language = self.get_user_language(user_id)

            # Here you would typically save the rating to your database
            # For now, we'll just show a confirmation message

            messages = {
                'en': f"""‚úÖ Thank you for your rating!

Rating: {'‚≠ê' * rating}

Your feedback helps us improve our service.""",
                'es': f"""‚úÖ ¬°Gracias por su calificaci√≥n!

Calificaci√≥n: {'‚≠ê' * rating}

Sus comentarios nos ayudan a mejorar nuestro servicio.""",
                'ru': f"""‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!

–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * rating}

–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å."""
            }

            await query.message.edit_text(
                messages[language],
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_main_menu_keyboard(language)
            )

            return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error skipping review text: {e}")
            raise

    def get_user_language(self, user_id: int) -> str:
        """Get user's preferred language"""
        return self.user_languages.get(user_id, 'en')

    async def show_about_us(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show about us information"""
        try:
            query = update.callback_query
            if not query:
                return
            
            try:
                await query.answer()
            except Exception as e:
                logger.error(f"Error answering callback query: {e}")
            
            language = self.get_user_language(query.from_user.id)
            
            if language == 'ru':
                text = "–û –Ω–∞—Å\n\n"
                text += "Rent Car Chile\n"
                text += "üöó –í–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –≤–∞—à —Ç–µ–º–ø. –ù–∞—à–µ –æ–±–µ—â–∞–Ω–∏–µ - –≤–∞—à–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ.\n\n"
                text += "–ë–æ–ª–µ–µ 3 –ª–µ—Ç –æ–ø—ã—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏ –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π –ø–æ –≤—Å–µ–º—É –ß–∏–ª–∏. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ - –º—ã –¥–∞—Ä–∏–º —Å–≤–æ–±–æ–¥—É, –≥–∏–±–∫–æ—Å—Ç—å –∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–∞ –∫–∞–∂–¥–æ–º –∫–∏–ª–æ–º–µ—Ç—Ä–µ –ø—É—Ç–∏.\n\n"
                text += "–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?\n\n"
                text += "üïê –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
                text += "‚úàÔ∏è –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≥–¥–µ —É–¥–æ–±–Ω–æ: –ê—ç—Ä–æ–ø–æ—Ä—Ç, –í–∏–Ω—å—è-–¥–µ–ª—å-–ú–∞—Ä, –ö–æ–Ω–∫–æ–Ω, –†–µ–Ω—å—è–∫–∞ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Å—Ç–∞\n"
                text += "üîÑ –ì–∏–±–∫–∏–µ —É—Å–ª–æ–≤–∏—è: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≤–∞—à–µ–º—É –≥—Ä–∞—Ñ–∏–∫—É\n"
                text += "üíµ –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã: CLP, USD, RUB, USDT, PayPal, Western Union –∏ –¥—Ä—É–≥–∏–µ\n"
                text += "ü§ù –ü—Ä–µ–º–∏—É–º-—Å–µ—Ä–≤–∏—Å: –ö–æ–Ω—Å—å–µ—Ä–∂, –ø–µ—Ä–µ–≤–æ–¥ –∏ —É—Å–ª—É–≥–∏ –≥–∏–¥–∞\n"
                text += "üåé –ì–æ–≤–æ—Ä–∏–º –Ω–∞ –≤–∞—à–µ–º —è–∑—ã–∫–µ - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π. –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ\n"
                text += "üèÜ –ú–µ—Å—Ç–Ω–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞: 3 –≥–æ–¥–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∏ —Å–æ—Ç–Ω–∏ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
                text += "–ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ –ø–æ-—Å–≤–æ–µ–º—É.\n"
                text += "–û—Ç–∫—Ä–æ–π—Ç–µ –ß–∏–ª–∏ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü —Å Rent Car Chile!\n\n"
                text += "üì± WhatsApp: +56982567485\n"
                text += "üåê www.rentcarchile.com\n"
                text += "üì∏ Instagram: rent.carchile\n"
                text += "üí¨ Telegram: @rentcar_chile"

                keyboard = [
                    [InlineKeyboardButton("üåê –í–µ–±-—Å–∞–π—Ç", url="http://www.rentcarchile.com")],
                    [InlineKeyboardButton("üì∏ Instagram", url="https://instagram.com/rent.carchile")],
                    [InlineKeyboardButton("üí¨ Telegram", url="https://t.me/rentcar_chile")],
                    [InlineKeyboardButton("üì± WhatsApp", url="https://wa.me/56982567485")],
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
                ]

            elif language == 'es':
                text = "Sobre Nosotros\n\n"
                text += "Rent Car Chile\n"
                text += "üöó Tu viaje, tu ritmo. Nuestra promesa, tu tranquilidad.\n\n"
                text += "Con m√°s de 3 a√±os de experiencia sirviendo a viajeros y locales en todo Chile, ofrecemos m√°s que solo autos: entregamos libertad, flexibilidad y un servicio verdaderamente personal en cada kil√≥metro del camino.\n\n"
                text += "¬øPor qu√© elegirnos?\n\n"
                text += "üïê Soporte 24/7 para clientes de largo plazo\n"
                text += "‚úàÔ∏è Recogida y entrega donde lo necesites: Aeropuerto, Vi√±a del Mar, Conc√≥n, Re√±aca y m√°s\n"
                text += "üîÑ T√©rminos flexibles: Recoge y devuelve tu auto seg√∫n tu horario\n"
                text += "üíµ M√∫ltiples opciones de pago: CLP, USD, RUB, USDT, PayPal, Western Union y m√°s\n"
                text += "ü§ù Atenci√≥n premium: Opciones de concierge, traducci√≥n y gu√≠a tur√≠stico\n"
                text += "üåé Hablamos tu idioma - Ingl√©s, Espa√±ol y Ruso. Te guiamos en cada paso\n"
                text += "üèÜ Experiencia local: 3 a√±os de reputaci√≥n y cientos de clientes satisfechos\n\n"
                text += "Viaja seguro, viaja a tu manera.\n"
                text += "¬°Descubre Chile sin l√≠mites con Rent Car Chile!\n\n"
                text += "üì± WhatsApp: +56921701913\n"
                text += "üåê www.rentcarchile.com\n"
                text += "üì∏ Instagram: rent.carchile"

                keyboard = [
                    [InlineKeyboardButton("üåê Sitio web", url="http://www.rentcarchile.com")],
                    [InlineKeyboardButton("üì∏ Instagram", url="https://instagram.com/rent.carchile")],
                    [InlineKeyboardButton("üì± WhatsApp", url="https://wa.me/56921701913")],
                    [InlineKeyboardButton("üîô Volver al Men√∫", callback_data="main_menu")]
                ]

            else:  # English
                text = "About Us\n\n"
                text += "Rent Car Chile\n"
                text += "üöó Your journey, your pace. Our promise, your peace of mind.\n\n"
                text += "With over 3 years of experience serving travelers and locals across Chile, we offer more than just cars‚Äîwe deliver freedom, flexibility, and truly personal service every mile of the way.\n\n"
                text += "Why choose us?\n\n"
                text += "üïê 24/7 support for long-term clients\n"
                text += "‚úàÔ∏è Pick-up and drop-off wherever you need: Airport, Vi√±a del Mar, Conc√≥n, Re√±aca, and more\n"
                text += "üîÑ Flexible terms: Collect and return your car on your schedule\n"
                text += "üíµ Multiple payment options: CLP, USD, RUB, USDT, PayPal, Western Union, and more\n"
                text += "ü§ù Premium attention: Concierge, translation, and tour guide options\n"
                text += "üåé We speak your language‚ÄîEnglish, Spanish, and Russian. We guide you at every step\n"
                text += "üèÜ Local expertise: 3 years of reputation and hundreds of happy clients\n\n"
                text += "Travel safe, travel your way.\n"
                text += "Discover Chile without limits with Rent Car Chile!\n\n"
                text += "üì± WhatsApp: +56921701913\n"
                text += "üåê www.rentcarchile.com\n"
                text += "üì∏ Instagram: rent.carchile"

                keyboard = [
                    [InlineKeyboardButton("üåê Website", url="http://www.rentcarchile.com")],
                    [InlineKeyboardButton("üì∏ Instagram", url="https://instagram.com/rent.carchile")],
                    [InlineKeyboardButton("üì± WhatsApp", url="https://wa.me/56921701913")],
                    [InlineKeyboardButton("üîô Back to Menu", callback_data="main_menu")]
                ]

            try:
                await query.message.edit_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as edit_error:
                logger.error(f"Error editing message: {edit_error}")
                await query.message.reply_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                try:
                    await query.message.delete()
                except Exception as delete_error:
                    logger.error(f"Error deleting old message: {delete_error}")

        except Exception as e:
            logger.error(f"Error showing about us: {e}")
            try:
                if query and query.message:
                    await query.message.reply_text(
                        "Sorry, there was an error displaying the About Us information. Please try again.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô Back to Menu", callback_data="main_menu")]])
                    )
            except Exception as e2:
                logger.error(f"Error sending error message: {e2}")
            pass

    async def start_booking_process(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start the booking process by showing car categories"""
        try:
            query = update.callback_query
            try:
                await query.answer()
            except Exception as e:
                logger.error(f"Error answering callback query: {e}")
                # Continue even if answering the query fails
            
            language = self.get_user_language(query.from_user.id)
            
            # Check if booking was started from a specific car
            if query.data.startswith("book_car_"):
                car_id = query.data.split("_")[2]
                context.user_data['selected_car'] = car_id
                
                messages = {
                    'en': """*üìÖ Select Dates*

Please enter your desired rental dates in the format:
DD.MM.YYYY - DD.MM.YYYY

Example: 25.12.2023 - 30.12.2023

Note: Duration is calculated in full 24-hour periods.""",
                    'es': """*üìÖ Seleccionar Fechas*

Por favor ingrese las fechas deseadas en el formato:
DD.MM.YYYY - DD.MM.YYYY

Ejemplo: 25.12.2023 - 30.12.2023

Nota: La duraci√≥n se calcula en per√≠odos completos de 24 horas.""",
                    'ru': """*üìÖ –í—ã–±–æ—Ä –î–∞—Ç*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –¥–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
DD.MM.YYYY - DD.MM.YYYY

–ü—Ä–∏–º–µ—Ä: 25.12.2023 - 30.12.2023

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–º–∏ 24-—á–∞—Å–æ–≤—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏."""
                }
                
                keyboard = [[InlineKeyboardButton(MENU_TRANSLATIONS['back_to_menu'][language], callback_data="main_menu")]]
                
                try:
                    await query.message.edit_text(
                        messages[language],
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as edit_error:
                    logger.error(f"Error editing message: {edit_error}")
                    # If editing fails, send a new message
                    await query.message.reply_text(
                        messages[language],
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                
                return SELECTING_DATES
            
            # Show categories for regular booking flow
            messages = {
                'en': """*üöó Car Categories*

Please select a category to view available cars.

*Discounts:*
‚Ä¢ From 3 days - 15% off
‚Ä¢ From 30 days - 25% off
‚Ä¢ From 90 days - 35% off""",
                'es': """*üöó Categor√≠as de Autos*

Por favor seleccione una categor√≠a para ver los autos disponibles.

*Descuentos:*
‚Ä¢ Desde 3 d√≠as - 15% desc.
‚Ä¢ Desde 30 d√≠as - 25% desc.
‚Ä¢ Desde 90 d√≠as - 35% desc.""",
                'ru': """*üöó –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.

*–°–∫–∏–¥–∫–∏:*
‚Ä¢ –û—Ç 3 –¥–Ω–µ–π - —Å–∫–∏–¥–∫–∞ 15%
‚Ä¢ –û—Ç 30 –¥–Ω–µ–π - —Å–∫–∏–¥–∫–∞ 25%
‚Ä¢ –û—Ç 90 –¥–Ω–µ–π - —Å–∫–∏–¥–∫–∞ 35%"""
            }
            
            # Create keyboard with car categories
            keyboard = []
            for category, info in CAR_CATEGORIES.items():
                keyboard.append([InlineKeyboardButton(
                    f"{info['name'][language]} - {info['price_per_day']} CLP/day",
                    callback_data=f"category_{category}"
                )])
            keyboard.append([InlineKeyboardButton(MENU_TRANSLATIONS['back_to_menu'][language], callback_data="main_menu")])
            
            try:
                await query.message.edit_text(
                    messages[language],
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as edit_error:
                logger.error(f"Error editing message: {edit_error}")
                # If editing fails, send a new message
                await query.message.reply_text(
                    messages[language],
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            
            return CHOOSING_CATEGORY
            
        except Exception as e:
            logger.error(f"Error in start_booking_process: {e}")
            print(f"‚ùå Error in start_booking_process: {str(e)}")
            if update.effective_chat:
                try:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="Please use /start to show the menu.",
                        reply_markup=get_main_menu_keyboard('en')
                    )
                except Exception as e2:
                    logger.error(f"Error sending error message: {e2}")
            return ConversationHandler.END

    async def show_privacy_policy(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show privacy policy"""
        try:
            query = update.callback_query
            if query:
                try:
                    await query.answer()
                except Exception as e:
                    logger.error(f"Error answering callback query: {e}")

            language = self.get_user_language(update.effective_user.id)
            
            messages = {
                'en': """*Privacy Policy*

We value your privacy and protect your personal data. By using our service, you agree to the following:

*Data We Collect:*
‚Ä¢ Full name
‚Ä¢ Phone number
‚Ä¢ Email address
‚Ä¢ Telegram username
‚Ä¢ Booking preferences and history

*How We Use Your Data:*
‚Ä¢ Process your car rental requests
‚Ä¢ Contact you about your bookings
‚Ä¢ Send important updates about your rental
‚Ä¢ Improve our service

*Data Protection:*
‚Ä¢ We store your data securely
‚Ä¢ We never share your data with third parties
‚Ä¢ We keep your data only as long as necessary
‚Ä¢ You can request data deletion at any time

*Your Rights:*
‚Ä¢ Access your personal data
‚Ä¢ Request data correction
‚Ä¢ Request data deletion
‚Ä¢ Withdraw consent

*Contact Us:*
For privacy concerns, contact us through:
‚Ä¢ Telegram: @rentcar_chile
‚Ä¢ Email: privacy@rentcarchile.com

By proceeding with the booking, you agree to our privacy policy.""",

                'es': """*Pol√≠tica de Privacidad*

Valoramos su privacidad y protegemos sus datos personales. Al usar nuestro servicio, usted acepta lo siguiente:

*Datos que Recopilamos:*
‚Ä¢ Nombre completo
‚Ä¢ N√∫mero de tel√©fono
‚Ä¢ Correo electr√≥nico
‚Ä¢ Usuario de Telegram
‚Ä¢ Preferencias e historial de reservas

*C√≥mo Usamos sus Datos:*
‚Ä¢ Procesar sus solicitudes de alquiler
‚Ä¢ Contactarlo sobre sus reservas
‚Ä¢ Enviar actualizaciones importantes
‚Ä¢ Mejorar nuestro servicio

*Protecci√≥n de Datos:*
‚Ä¢ Almacenamos sus datos de forma segura
‚Ä¢ Nunca compartimos sus datos con terceros
‚Ä¢ Conservamos sus datos solo el tiempo necesario
‚Ä¢ Puede solicitar la eliminaci√≥n de datos

*Sus Derechos:*
‚Ä¢ Acceder a sus datos personales
‚Ä¢ Solicitar correcci√≥n de datos
‚Ä¢ Solicitar eliminaci√≥n de datos
‚Ä¢ Retirar el consentimiento

*Cont√°ctenos:*
Para consultas de privacidad, cont√°ctenos a trav√©s de:
‚Ä¢ Telegram: @rentcar_chile
‚Ä¢ Email: privacy@rentcarchile.com

Al continuar con la reserva, acepta nuestra pol√≠tica de privacidad.""",

                'ru': """*–ü–æ–ª–∏—Ç–∏–∫–∞ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*

–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—â–∞–µ–º –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à —Å–µ—Ä–≤–∏—Å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º:

*–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–±–∏—Ä–∞–µ–º:*
‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è
‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π

*–ö–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞—Ä–µ–Ω–¥—É
‚Ä¢ –°–≤—è–∑—å —Å –≤–∞–º–∏ –ø–æ –ø–æ–≤–æ–¥—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

*–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:*
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

*–í–∞—à–∏ –ø—Ä–∞–≤–∞:*
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º
‚Ä¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –û—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è

*–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:*
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:
‚Ä¢ Telegram: @rentcar_chile
‚Ä¢ Email: privacy@rentcarchile.com

–ü—Ä–æ–¥–æ–ª–∂–∞—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."""
            }

            keyboard = [
                [InlineKeyboardButton(MENU_TRANSLATIONS['back_to_menu'][language], callback_data="main_menu")]
            ]

            if update.message:
                await update.message.reply_text(
                    messages[language],
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            elif query and query.message:
                try:
                    await query.message.edit_text(
                        messages[language],
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                except Exception as edit_error:
                    logger.error(f"Error editing message: {edit_error}")
                    await query.message.reply_text(
                        messages[language],
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )

        except Exception as e:
            logger.error(f"Error showing privacy policy: {e}")
            if update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="Error showing privacy policy. Please try again.",
                    reply_markup=get_main_menu_keyboard('en')
                )

    async def handle_privacy_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle privacy policy response"""
        try:
            query = update.callback_query
            print(f"üîç Privacy response: {query.data}")
            await query.answer()
            
            language = self.get_user_language(query.from_user.id)
            print(f"üåê User language: {language}")
            
            if query.data == "view_privacy":
                print("üìã Showing privacy policy")
                await self.show_privacy_policy(update, context)
                return VIEWING_PRIVACY
                
            elif query.data == "accept_privacy":
                print("‚úÖ Privacy policy accepted")
                # Show personal info form
                messages = {
                    'en': """*üë§ Personal Information*

Please provide your contact information in the following format:

Name: [your full name]
Phone: [your phone number]
Email: [your email]

Example:
Name: John Smith
Phone: +1234567890
Email: john@email.com""",
                    'es': """*üë§ Informaci√≥n Personal*

Por favor proporcione su informaci√≥n de contacto en el siguiente formato:

Nombre: [su nombre completo]
Tel√©fono: [su n√∫mero de tel√©fono]
Email: [su email]

Ejemplo:
Nombre: Juan P√©rez
Tel√©fono: +1234567890
Email: juan@email.com""",
                    'ru': """*üë§ –õ–∏—á–Ω–∞—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

–ò–º—è: [–≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è]
–¢–µ–ª–µ—Ñ–æ–Ω: [–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]
Email: [–≤–∞—à email]

–ü—Ä–∏–º–µ—Ä:
–ò–º—è: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
–¢–µ–ª–µ—Ñ–æ–Ω: +1234567890
Email: ivan@email.com"""
                }

                keyboard = [[InlineKeyboardButton(MENU_TRANSLATIONS['back_to_menu'][language], callback_data="main_menu")]]

                print("üì§ Sending personal info form")
                await query.message.edit_text(
                    messages[language],
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                print("‚úÖ Personal info form sent")
                return ENTERING_PERSONAL_INFO
            else:
                print("‚ùå Privacy policy rejected or cancelled")
                return await self.show_main_menu(update, context)

        except Exception as e:
            print(f"‚ùå Error in handle_privacy_response: {str(e)}")
            logger.error(f"Error handling privacy response: {e}")
            if update.effective_chat:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="Error processing your response. Please try again.",
                    reply_markup=get_main_menu_keyboard('en')
                )
            return ConversationHandler.END

def main():
    """Start the bot"""
    try:
        bot = CarRentalBot()
        application = Application.builder().token(BOT_TOKEN).build()

        # Debug handler to print all updates
        async def debug_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            print("üîç DEBUG INFO:")
            print(f"Chat ID: {update.effective_chat.id}")
            print(f"User: {update.effective_user.username if update.effective_user else 'Unknown'}")
            print(f"Message type: {'callback_query' if update.callback_query else 'message'}")
            if update.message:
                print(f"Message text: {update.message.text}")
            if update.callback_query:
                print(f"Callback data: {update.callback_query.data}")
            print("------------------------")
            return False

        # Add debug handler first
        application.add_handler(MessageHandler(filters.ALL, debug_handler), group=-1)

        # Add language selection handler
        application.add_handler(CommandHandler("start", bot.start))
        application.add_handler(CallbackQueryHandler(bot.handle_language_selection, pattern="^lang_"))

        # Add booking handler
        booking_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(bot.start_booking_process, pattern="^make_reservation$"),
                CallbackQueryHandler(bot.start_booking_process, pattern="^book_car_")
            ],
            states={
                CHOOSING_CATEGORY: [
                    CallbackQueryHandler(bot.show_cars_in_category, pattern="^category_"),
                    CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$")
                ],
                CHOOSING_CAR: [
                    CallbackQueryHandler(bot.handle_car_selection, pattern="^car_"),
                    CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$")
                ],
                SELECTING_DATES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_dates_input),
                    CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$")
                ],
                VIEWING_PRIVACY: [
                    CallbackQueryHandler(bot.handle_privacy_response),
                    CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$")
                ],
                ENTERING_PERSONAL_INFO: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_personal_info),
                    CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$")
                ],
                CONFIRMING_BOOKING: [
                    CallbackQueryHandler(bot.confirm_booking, pattern="^confirm_booking$"),
                    CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$")
                ]
            },
            fallbacks=[
                CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$"),
                CommandHandler("cancel", lambda u, c: ConversationHandler.END)
            ],
            per_message=False
        )

        # Add review handler
        review_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(bot.start_review_process, pattern="^leave_review$")],
            states={
                SELECTING_RATING: [
                    CallbackQueryHandler(bot.handle_rating_selection, pattern="^rate_[1-4]$"),
                    CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$")
                ],
                ENTERING_REVIEW: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_review_text),
                    CallbackQueryHandler(bot.start_review_process, pattern="^change_rating$"),
                    CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$")
                ]
            },
            fallbacks=[
                CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$"),
                CommandHandler("cancel", lambda u, c: ConversationHandler.END)
            ],
            per_message=False
        )

        # Add handlers
        application.add_handler(booking_handler)
        application.add_handler(review_handler)
        
        # Add menu handlers
        application.add_handler(CallbackQueryHandler(bot.show_car_fleet, pattern="^car_fleet$"))
        application.add_handler(CallbackQueryHandler(bot.show_conditions, pattern="^conditions$"))
        application.add_handler(CallbackQueryHandler(bot.show_payment_methods, pattern="^payment_methods$"))
        application.add_handler(CallbackQueryHandler(bot.show_contact_info, pattern="^contact_us$"))
        application.add_handler(CallbackQueryHandler(bot.show_about_us, pattern="^about_us$"))
        application.add_handler(CallbackQueryHandler(bot.show_privacy_policy, pattern="^privacy_policy$"))
        application.add_handler(CallbackQueryHandler(bot.show_main_menu, pattern="^main_menu$"))
        application.add_handler(CallbackQueryHandler(bot.start, pattern="^change_language$"))

        # Add error handler
        application.add_error_handler(bot.error_handler)

        print("üöó CarRental Bot is starting...")
        application.run_polling()

    except Exception as e:
        logger.error(f"Fatal error: {e}")
        raise

if __name__ == '__main__':
    main() 